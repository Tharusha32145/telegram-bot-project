import os
import asyncio
from telethon import TelegramClient, events
from flask import Flask
from threading import Thread

# --- Replit Secrets ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä ‡∂∏‡∑ö‡∑Ä‡∑è ‡∂ú‡∂±‡∑ì ---
API_ID = int(os.environ.get("API_ID"))
API_HASH = os.environ.get("API_HASH")
BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHANNEL_ID = int(os.environ.get("CHANNEL_ID"))

# --- ‡∂î‡∂∫‡∑è‡∂ú‡∑ö ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂∏‡∑ô‡∂≠‡∂± ‡∂Ø‡∑è‡∂±‡∑ä‡∂± ---
VIDEO_MAP = {
    "video1": {
        "source": "https://sujanch-stream.koyeb.app/238145?hash=AgAD6B",
        "caption": "üé¨ ‡∂∏‡∑ö ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä ‡∑Ä‡∑í‡∂±‡∑è‡∂©‡∑í 30‡∂ö‡∑í‡∂±‡∑ä ‡∂â‡∂∂‡∑ö‡∂∏ ‡∂∏‡∑ê‡∂ö‡∑ì ‡∂∫‡∂±‡∑î ‡∂á‡∂≠."
    },
    "video2": {
        "source": "https://files.example.com/sample2.mp4", 
        "caption": "üé¨ ‡∂∏‡∑ö‡∂ö‡∂≠‡∑ä ‡∑Ä‡∑í‡∂±‡∑è‡∂©‡∑í 30‡∂ö‡∑í‡∂±‡∑ä delete ‡∑Ä‡∑ô‡∂±‡∑Ä‡∑è."
    }
}

DELETE_AFTER_SECONDS = 30 * 60  # ‡∑Ä‡∑í‡∂±‡∑è‡∂©‡∑í 30

# --- Bot Code ‡∂ë‡∂ö ---
client = TelegramClient('bot_session', API_ID, API_HASH)

@client.on(events.NewMessage(pattern=r'/start (.*)'))
async def start_handler(event):
    # ... (‡∂ö‡∂Ω‡∑í‡∂±‡∑ä code ‡∂ë‡∂ö‡∑ö ‡∂≠‡∑í‡∂∂‡∑ä‡∂∂ start_handler function ‡∂ë‡∂ö‡∑ö ‡∂â‡∂≠‡∑î‡∂ª‡∑î ‡∂ß‡∑í‡∂ö ‡∂∏‡∑ô‡∂≠‡∂± ‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑Ä‡∑è)
    payload = event.pattern_match.group(1)
    video_data = VIDEO_MAP.get(payload)

    if not video_data:
        await event.respond("‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö. (Video not found.)")
        return
    try:
        await event.respond("‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä ‡∂†‡∑ê‡∂±‡∂Ω‡∂∫‡∂ß ‡∂∫‡∑Ä‡∂∏‡∑í‡∂±‡∑ä ‡∂¥‡∑Ä‡∂≠‡∑ì...")
        msg = await client.send_file(CHANNEL_ID, file=video_data["source"], caption=video_data["caption"])
        await event.respond("‚úÖ ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä ‡∂†‡∑ê‡∂±‡∂Ω‡∂∫‡∂ß ‡∂∫‡∑Ä‡∂± ‡∂Ω‡∂Ø‡∑ì. ‡∂ë‡∂∫ ‡∑Ä‡∑í‡∂±‡∑è‡∂©‡∑í 30‡∂ö‡∑í‡∂±‡∑ä ‡∂∏‡∑ê‡∂ö‡∑ì ‡∂∫‡∂±‡∑î ‡∂á‡∂≠.")
        await asyncio.sleep(DELETE_AFTER_SECONDS)
        await client.delete_messages(CHANNEL_ID, msg.id)
        print(f"Message {msg.id} deleted.")
    except Exception as e:
        await event.respond(f"‚ùå ‡∂∫‡∂∏‡∑ä ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î ‡∑Ä‡∑í‡∂∫: {e}")
        print(f"Error: {e}")

# --- 24/7 Online ‡∂≠‡∑í‡∂∫‡∑è‡∂ú‡∂±‡∑ä‡∂± ‡∂¥‡∑ú‡∂©‡∑í Web Server ‡∂ë‡∂ö‡∂ö‡∑ä ---
app = Flask('')
@app.route('/')
def home():
    return "I'm alive!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# --- Bot ‡∑Ä ‡∑É‡∑Ñ Server ‡∂ë‡∂ö Run ‡∂ö‡∂ª‡∂± ‡∂≠‡∑ê‡∂± ---
async def main():
    print("Bot is starting...")
    await client.start(bot_token=BOT_TOKEN)
    print("Bot has started successfully!")
    await client.run_until_disconnected()

if __name__ == '__main__':
    keep_alive()
    # Telethon asyncio loop ‡∂ë‡∂ö run ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
    with client:
        client.loop.run_until_complete(main())
